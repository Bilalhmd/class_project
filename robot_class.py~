import gazebo_swarm
import time
import numpy as np





class Robot(object):
    def __init__(self, id, dt, debug=False):
        self.interf = gazebo_swarm.GazeboRobotIface(id)
        self.id = id
        self.dt = dt
        self.r = 0.033  # wheel radius
        self.l = 0.165   # wheel distance from local frame center
        self.heading = 0.  # initial robot heading
        self.c_matrix = np.array([[1., 0., self.l],
                                  [1., 0., -self.l],
                                  [0., 1., 0.]])
        self.c_inv = np.array([[.5, .5, 0.],
                                  [0., 0., 1.],
                                  [.5*self.l, .5*self.l, 0.]])
        self.position_gains = [1., 1.]
        self.current_heading = 0.
        self.omega = self.r * 2. / self.l
        self.debug = debug

    def position(self):
        if self.id == 0:
            return self.interf.get_gps()
        else:
            return None

    def forward_velocity(self, wheel_speed):
        return self.r * (wheel_speed[0]+wheel_speed[1])

    def rotation_velocity(self, wheel_speed):
        return (self.r/self.l)*(wheel_speed[1]-wheel_speed[0])    # gazebo interface takes wheel speed [left, right]

    def rotation_matrix(self, theta):
        return np.array([[np.cos(theta), np.sin(theta), 0.],
                         [-np.sin(theta), np.cos(theta), 0.],
                         [0., 0., 1.]])

    # def rotation_control(self, desired_angle, current_angle):
    #     if desired_angle>=0.:
    #         if current_angle <= desired_angle:
    #             self.interf.set_wheel_velocity([-1., 1.])
    #             omega = self.r * 2. / self.l
    #             return True, omega
    #         else:
    #             print 'current angle ', self.current_heading, ' desired ', desired_angle
    #             self.interf.set_wheel_velocity([0., 0.])
    #             return False, 0.
    #     else:
    #         if desired_angle<=current_angle:
    #             self.interf.set_wheel_velocity([1., -1.])
    #             omega = -self.r * 2. / self.l
    #             return True, omega
    #         else:
    #             print 'current angle ', self.current_heading, ' desired ', desired_angle
    #             self.interf.set_wheel_velocity([0., 0.])
    #             return False, 0.

    def rotation_control(self, desired_angle, current_angle):

        if abs(desired_angle-current_angle)<= 0.0005:
            if self.debug: print ' Desired heading reached'
            if self.debug: print 'current angle ', \
                self.current_heading, ' desired ', desired_angle
            self.interf.set_wheel_velocity([0., 0.])
            return False, 0.
        elif current_angle < desired_angle:
            self.interf.set_wheel_velocity([-1., 1.])
            omega = self.r * 2. / self.l
            return True, omega
        elif current_angle > desired_angle:
            self.interf.set_wheel_velocity([1., -1.])
            omega = -self.r * 2. / self.l
            return True, omega

    def heading_controller(self, desired_heading):
        if self.debug: print 'desired angle = ', desired_heading
        theta_control = True

        while theta_control:
            theta_control, omega = self.rotation_control(desired_heading,
                                                         self.current_heading)
            self.current_heading += self.dt * omega
            time.sleep(self.dt)

        if self.debug: print 'current angle = ', self.current_heading

    def velocity_control(self, fx, fy):
        v = min(np.sqrt(fx**2 + fy**2),0.5)
        phi_dot = 2*v/self.r
        self.interf.set_wheel_velocity([phi_dot, phi_dot])

    def obstacle_control(self):
        pass

    def formation_control(self):
        pass

    def position_control(self, target_pos):
        current_pos = self.position()
        distance_to_target = np.sqrt((current_pos[0] - target_pos[0]) ** 2 +
                                     (current_pos[1] - target_pos[1]) ** 2)
        if distance_to_target <= 0.1:  # 10 cm error
            print ' target reached '
            return False, [0., 0.]
        else:
            fx = self.position_gains[0] * (target_pos[0] - current_pos[0])
            fy = self.position_gains[1] * (target_pos[1] - current_pos[1])
            return True, [fx, fy]

    def robot_controller(self, target_position):
        fx = 0.
        fy = 0.
        controller, f_pos = self.position_control(target_position)

        fx += f_pos[0]
        fy += f_pos[1]
        # desired heading such that moving along it with v generates desired dx,dy
        desired_theta = np.arctan2(fy, fx)
        print 'desired theta = ', desired_theta
        self.heading_controller(desired_theta)
        controller = True
        while controller:
            fx = 0.
            fy = 0.
            controller, f_pos = self.position_control(target_position)
            fx += f_pos[0]
            fy += f_pos[1]
            self.velocity_control(fx, fy)


    def test_controller(self,target_position):
        controller = True
        while controller:
            fx = 0.
            fy = 0.
            controller, f_pos = self.position_control(target_position)
            # if not controller: break
            fx += f_pos[0]
            fy += f_pos[1]
            desired_theta = np.arctan2(fy, fx)
            if self.debug: print 'desired theta = ', desired_theta
            self.heading_controller(desired_theta)
            self.velocity_control(fx, fy)















def reset_world():
    inter = gazebo_swarm.GazeboWorldIface()
    inter.reset()



if __name__ == "__main__":

    reset_world()
    robot0 = Robot(id=0, dt=.001, debug=False)
    robot0.test_controller([1., -1.])
    time.sleep(2.0)
    robot0.test_controller([2., -1.])
    time.sleep(2.0)
    robot0.test_controller([2., -9.])
    time.sleep(2.0)
    robot0.test_controller([-10., -7.])
    time.sleep(2.0)
    robot0.test_controller([-3., -3.])
    time.sleep(2.0)
    robot0.test_controller([-3., 7.])
    time.sleep(2.0)
    robot0.test_controller([7., 7.])
    time.sleep(2.0)
    robot0.test_controller([7., 1.])
    time.sleep(2.0)
    robot0.test_controller([6., -3.])
    time.sleep(2.0)
    robot0.test_controller([7., -9.])
    time.sleep(2.0)
    robot0.test_controller([10., -10.])




